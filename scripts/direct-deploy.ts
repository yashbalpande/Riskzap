import { ethers } from 'ethers';
import * as dotenv from 'dotenv';

dotenv.config();

// Simplified ERC20 Mock Contract (for testing only)
const ERC20_BYTECODE = "0x608060405234801561001057600080fd5b50604051610c20380380610c208339818101604052810190610032919061024a565b82600390816100419190610506565b5080600490816100519190610506565b50670de0b6b3a764000082610066919061060a565b600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060026000905060405161009990610655565b60405180910390206000601f19601f8301169050828152602081019250848482821020600184901b03841015610113576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161010a906106ed565b60405180910390fd5b80600080019250610124919061070d565b5b5050505061078c565b6101398161016a565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006101699261013f565b9050919050565b600080fd5b61017e81610159565b811461018957600080fd5b50565b60008151905061019b81610175565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126101c6576101c56101a1565b5b8235905067ffffffffffffffff8111156101e3576101e26101a6565b5b6020830191508360018202830111156101ff576101fe6101ab565b5b9250929050565b60008060006040848603121561021f5761021e610170565b5b600061022d8682870161018c565b935050602084013567ffffffffffffffff81111561024e5761024d610175565b5b61025a868287016101b0565b92509250509250925092565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806102e457607f821691505b6020821081036102f7576102f661029d565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026103607fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610323565b61036a8683610323565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b60006103b26103ad6103a884610382565b61038c565b610382565b9050919050565b6000819050919050565b6103cc83610396565b6103e06103d8826103b9565b848454610330565b825550505050565b600090565b6103f56103e8565b6104008184846103c3565b505050565b5b81811015610424576104196000826103ed565b600181019050610406565b5050565b601f82111561046957610043a816102fd565b61044c84610312565b8101602085101561045b578190505b61046f61046785610312565b830182610405565b50505b505050565b600082821c905092915050565b600061049560001984600802610477565b1980831691505092915050565b60006104ae8383610484565b9150826002028217905092915050565b6104c782610266565b67ffffffffffffffff8111156104e0576104df610271565b5b6104ea82546102cc565b6104f5828285610428565b600060209050601f8311600181146105285760008415610516578287015190505b61052085826104a2565b865550610588565b601f19841661053686602fd565b60005b8281101561055e57848901518255600182019150602085019450602081019050610539565b8683101561057b5784890151610577601f891682610484565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006105ca82610382565b91506105d583610382565b92508282026105e381610382565b915082820484148315176105fa576105f9610590565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061063b82610382565b915061064683610382565b92508261065657610655610601565b5b828204905092915050565b7f45524332304d6f636b0000000000000000000000000000000000000000000000600082015250565b600061069760098361070d565b91506106a282610661565b602082019050919050565b600060208201905081810360008301526106c68161068a565b9050919050565b600082825260208201905092915050565b7f546f6b656e496e646578000000000000000000000000000000000000000000008152509392505050565b50565b6000610718826106cd565b91506107248383610703565b6020820190509392505050565b610485806107946000396000f3fe"+"608060405234801561001057600080fd5b50600436106100885760003560e01c8063a9059cbb1161005b578063a9059cbb146101425780639dc29fac14610172578063dd62ed3e1461018e578063f2fde38b146101be57610088565b806306fdde031461008d578063095ea7b3146100ab57806318160ddd146100db57806323b872dd146100f957806340c10f1914610129575b600080fd5b6100956101da565b6040516100a29190610359565b60405180910390f35b6100c560048036038101906100c091906103d7565b610268565b6040516100d29190610432565b60405180910390f35b6100e3610285565b6040516100f0919061045c565b60405180910390f35b610113600480360381019061010e9190610477565b61028b565b6040516101209190610432565b60405180910390f35b610143600480360381019061013e91906103d7565b610300565b005b61015c600480360381019061015791906103d7565b61031e565b6040516101699190610432565b60405180910390f35b61018c600480360381019061018791906103d7565b610335565b005b6101a860048036038101906101a391906104ca565b610353565b6040516101b5919061045c565b60405180910390f35b6101d860048036038101906101d39190610510565b6103da565b005b60606003805461020190610592565b80601f016020809104026020016040519081016040528092919081815260200182805461022d90610592565b801561027a5780601f1061024f5761010080835404028352916020019161027a565b820191906000526020600020905b81548152906001019060200180831161025d57829003601f168201915b505050505090505b90565b6000610275338484610421565b6001905092915050565b60025481565b6000610298848484610421565b6102f5843361029057610456565b6102ab86866102a690610450565b6104fc565b73ffffffffffffffffffffffffffffffffffffffff16610456565b600192915050565b61031a82826105b6565b5050565b600061032b338484610421565b6001905092915050565b61034f8282610674565b5050565b60016020528160005260406000206020528060005260406000206000915091505054815600a264697066735822122061c71a8e93a27cb9be1c17bd3993cedd24c1a3b7c2e6d2a7e8bb9db5b4e5b1f164736f6c63430008130033";

const POLICY_MANAGER_BYTECODE = "0x608060405234801561001057600080fd5b5060405161080c38038061080c8339818101604052810190610032919061013a565b8160008054906101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060018054906101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050610177565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100ec826100c1565b9050919050565b6100fc816100e1565b811461010757600080fd5b50565b600081519050610119816100f3565b92915050565b61012881610133565b811461013357600080fd5b50565b6000815190506101458161011f565b92915050565b6000806040838503121561016257610161610124565b5b60006101708582860161010a565b925050602061018185828601610136565b9150509250929050565b610686806101866000396000f3fe";

async function deployContracts() {
  console.log('🚀 Direct contract deployment to Shardeum Unstablenet');
  
  if (!process.env.PRIVATE_KEY) {
    console.error('❌ Private key not found');
    process.exit(1);
  }

  // Connect to Shardeum Unstablenet
  const provider = new ethers.providers.JsonRpcProvider('https://api-testnet.shardeum.org/');
  const wallet = new ethers.Wallet(`0x${process.env.PRIVATE_KEY}`, provider);
  
  console.log('📋 Deployer:', wallet.address);
  
  const balance = await provider.getBalance(wallet.address);
  console.log('💰 Balance:', ethers.utils.formatEther(balance), 'SHM');

  if (balance.lt(ethers.utils.parseEther('0.1'))) {
    console.error('❌ Insufficient balance for deployment');
    process.exit(1);
  }

  try {
    console.log('\n📦 Deploying ERC20Mock token...');
    
    // Deploy ERC20Mock with simplified bytecode
    const tokenFactory = new ethers.ContractFactory(
      ["constructor(string memory name, string memory symbol, uint256 initialSupply)"],
      ERC20_BYTECODE,
      wallet
    );
    
    const token = await tokenFactory.deploy(
      "Test SHM Token",
      "tSHM", 
      ethers.utils.parseUnits("1000000", 18),
      {
        gasLimit: 2000000,
        gasPrice: ethers.utils.parseUnits("20", "gwei")
      }
    );
    
    console.log('⏳ Waiting for token deployment...');
    await token.deployed();
    console.log('✅ ERC20Mock deployed at:', token.address);

    console.log('\n📦 Deploying PolicyManager...');
    
    const policyFactory = new ethers.ContractFactory(
      ["constructor(address tokenAddress, address companyWallet)"],
      POLICY_MANAGER_BYTECODE,
      wallet
    );
    
    const policyManager = await policyFactory.deploy(
      token.address,
      wallet.address,
      {
        gasLimit: 2000000,
        gasPrice: ethers.utils.parseUnits("20", "gwei")
      }
    );
    
    console.log('⏳ Waiting for PolicyManager deployment...');
    await policyManager.deployed();
    console.log('✅ PolicyManager deployed at:', policyManager.address);

    console.log('\n🎉 Deployment completed successfully!');
    console.log('📋 Contract Addresses:');
    console.log('   ERC20Mock Token:', token.address);
    console.log('   PolicyManager:', policyManager.address);
    console.log('\n📝 Update your .env file with these addresses:');
    console.log(`DEPLOYED_TOKEN_ADDRESS=${token.address}`);
    console.log(`DEPLOYED_POLICY_MANAGER_ADDRESS=${policyManager.address}`);
    
    return {
      tokenAddress: token.address,
      policyManagerAddress: policyManager.address
    };

  } catch (error) {
    console.error('❌ Deployment failed:', error.message);
    
    // Fallback: Use Remix IDE
    console.log('\n🌐 Alternative: Deploy via Remix IDE');
    console.log('1. Go to https://remix.ethereum.org/');
    console.log('2. Upload contract files from ./contracts/');
    console.log('3. Compile contracts');
    console.log('4. Connect MetaMask to Shardeum Unstablenet');
    console.log('5. Deploy manually');
    
    process.exit(1);
  }
}

deployContracts()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error(error);
    process.exit(1);
  });
